#version 450

const mat3 weight = mat3(
	1.0, 2.0, 1.0,
	2.0, 4.0, 2.0,
	1.0, 2.0, 1.0
);

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(binding = 0, rgba16f) uniform image2D lowLevelTexture;
layout(binding = 1, rgba16f) uniform readonly image2D highLevelTexture;

layout(push_constant) uniform pushConstants
{
    vec2 u_outputTextureSize;
} myPerMip;

void main()
{
    if (gl_GlobalInvocationID.x >= myPerMip.u_outputTextureSize.x || gl_GlobalInvocationID.y >= myPerMip.u_outputTextureSize.y)
        return;

    ivec2 low_pixel_coord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 high_pixel_coord = low_pixel_coord / 2;

	// Additive blending
	vec3 value = vec3(0.0);	
	for(int i = 0; i < 3; ++i){
		for(int j = 0; j < 3; ++j){
			value += (imageLoad(highLevelTexture, high_pixel_coord + ivec2(i - 1, j - 1)).rgb) * weight[i][j];
		}
	}
	value /= 16.0;
	value += imageLoad(lowLevelTexture, low_pixel_coord).rgb;

    imageStore(lowLevelTexture, low_pixel_coord, vec4(value, 1.0));
}